import requests, time, random

channel = "" #CHANNEL ID
token = "" #AUTH TOKEN

def swap(id, region):
    return requests.patch(f"https://discord.com/api/v9/channels/{id}/call", headers = {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "en-US,en;q=0.9",
        "Authorization": token,
        "Connection": "keep-alive",
        "Content-Type": "application/json",
        "Host": "discord.com",
        "Origin": "https://discord.com",
        "Referer": f"https://discord.com/channels/@me/{id}",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.2 Safari/605.1.15",
        "X-Debug-Options": "bugReporterEnabled",
        "X-Discord-Locale": "en-US",
        "X-Discord-Timezone": "America/New_York",
        "X-Super-Properties": "eyJvcyI6Ik1hYyBPUyBYIiwiYnJvd3NlciI6IlNhZmFyaSIsImRldmljZSI6IiIsInN5c3RlbV9sb2NhbGUiOiJlbi1VUyIsImJyb3dzZXJfdXNlcl9hZ2VudCI6Ik1vemlsbGEvNS4wIChNYWNpbnRvc2g7IEludGVsIE1hYyBPUyBYIDEwXzE1XzcpIEFwcGxlV2ViS2l0LzYwNS4xLjE1IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi8xNy4yIFNhZmFyaS82MDUuMS4xNSIsImJyb3dzZXJfdmVyc2lvbiI6IjE3LjIiLCJvc192ZXJzaW9uIjoiMTAuMTUuNyIsInJlZmVycmVyIjoiIiwicmVmZXJyaW5nX2RvbWFpbiI6IiIsInJlZmVycmVyX2N1cnJlbnQiOiIiLCJyZWZlcnJpbmdfZG9tYWluX2N1cnJlbnQiOiIiLCJyZWxlYXNlX2NoYW5uZWwiOiJzdGFibGUiLCJjbGllbnRfYnVpbGRfbnVtYmVyIjoyNjA3MjUsImNsaWVudF9ldmVudF9zb3VyY2UiOm51bGx9",
    }, json = {"region": region})

def getRegions():
    data = swap(channel, "arsky").json()

    if "region" in data.get("errors", {}):
        error_message = data["errors"]["region"]["_errors"][0]["message"]
        
        regions_start = error_message.find("(") + 1
        regions_end = error_message.find(")")
        regions_str = error_message[regions_start:regions_end]

        regions_list = [region.replace(' ', '').replace("'", "") for region in regions_str.split(',')]
        
        return True, regions_list
    else:
        return False, None

sucess, regions = getRegions()

if sucess and regions != []:
    def flood():
        req = swap(channel, random.choice(regions)); time.sleep(2)
        
        flood()

    flood()
